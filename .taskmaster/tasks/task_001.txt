# Task ID: 1
# Title: Implement DPModel Core Structure
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create the main DPModel type that extends AbstractNLPModel from NLPModels.jl with all necessary fields and constructors.
# Details:
Create the DPModel struct with fields for:
- Constraint matrix A (supporting both sparse and dense formats)
- Target vector b
- Cost vector c
- Regularization parameter λ
- Reference point x̄
- Problem dimensions
- Internal state for caching

Implement constructors with sensible defaults and type stability. Ensure proper inheritance from AbstractNLPModel to maintain compatibility with the Julia optimization ecosystem. Include validation for inputs (dimensions, positivity constraints).

Example structure:
```julia
struct DPModel <: AbstractNLPModel
    meta::NLPModelMeta
    counters::Counters
    A::Union{Matrix, SparseMatrixCSC}
    b::Vector
    c::Vector
    λ::Real
    x̄::Vector
    # Additional fields for caching
    # ...
    
    # Inner constructor with validation
    function DPModel(A, b, c, λ, x̄; kwargs...)
        # Dimension validation
        # Parameter validation
        # Initialize meta and counters
        # Return new instance
    end
end
```

# Test Strategy:
Create unit tests that verify:
1. Proper construction with various input types
2. Error handling for invalid inputs (dimension mismatch, negative λ)
3. Inheritance from AbstractNLPModel
4. Proper initialization of meta and counters
5. Compatibility with NLPModels.jl interface functions
