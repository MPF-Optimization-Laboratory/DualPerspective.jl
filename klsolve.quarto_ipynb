{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"KL-Regularized Least Squares\"\n",
        "subtitle: \"Physics data\"\n",
        "authors:\n",
        "  - Nicholas Barnield\n",
        "  - Michael P. Friedlander\n",
        "  - Tim Hoheisel\n",
        "date: last-modified\n",
        "# format: typst\n",
        "format: html\n",
        "execute:\n",
        "    cache: true\n",
        "---"
      ],
      "id": "01a6ea00"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: false \n",
        "import Pkg; Pkg.activate(\".\"); Pkg.instantiate()"
      ],
      "id": "94411646",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| code-fold: true\n",
        "#| code-summary: \"Import packages\" \n",
        "using KLLS\n",
        "using NPZ\n",
        "using Plots\n",
        "using Printf\n",
        "using UnPack\n",
        "using LinearAlgebra"
      ],
      "id": "7e86f725",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Load physics data\n",
        "\n",
        "The file `PhysicsData.npz` contains the matrix and vectors generated by the script `PhysicsData.py`, where we get the output from `generate_data`:\n",
        "\n",
        "- `A` is the first output argument `A`\n",
        "- `b` is the second output argument `data0`\n",
        "- `x0` is the third input argument, which seems to be the ground truth distribution.\n"
      ],
      "id": "0cbe390e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: false \n",
        "data = npzread(\"./data/PhysicsData.npz\", [\"A\", \"b\", \"x0\"])\n",
        "@unpack A, b, x0 = data\n",
        "klprob = KLLSData(A, b, name=\"Physics Data\")"
      ],
      "id": "0b54db02",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Solve over a range of regularization parameters \n",
        "\n",
        "Solve the problem for a range of logarithmically spaced regularization parameters $\\lambda$ between $10^{-8}$ and $1$.\n"
      ],
      "id": "ab2f19cb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "stats = map(exp10.(range(-16, stop=-5, length=3))) do λ\n",
        "          klprob.λ = λ\n",
        "          p, y, stats = newtoncg(klprob)\n",
        "          (λ=λ, p=p, iters=stats.iter, ∇dNrm=stats.dual_feas)\n",
        "        end;"
      ],
      "id": "a9cd4aa2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Plot the recovered distributions for each value of $\\lambda$ and overlay the ground truth distribution $x_0$.\n"
      ],
      "id": "c7c603e9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "lab = hcat([@sprintf(\"λ = %6.0e\", λ) for λ in getfield.(stats, :λ)]...)\n",
        "default(lw=2, title=\"true and recovered distributions\")\n",
        "plot(getfield.(stats, :p), label=lab)\n",
        "plot!(x0, label=\"ground truth\")"
      ],
      "id": "0429e582",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The curve corresponding to the smallest parameter λ (1e-8) best approximates the modes of the ground-truth distribution, but smaller values of λ don't help.\n",
        "\n",
        "These tests use a uniform prior. Does the data generator make a prior available? If so, this could be used to improve the results.\n",
        "\n",
        "### Accurate solution \n",
        "\n",
        "Now try to solve the problem as accurately as possible. Set $\\lambda=0$ and the tightest tolerance reasonable.\n"
      ],
      "id": "d65d28b1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "klprob.λ = 0.0\n",
        "p, y, stats = newtoncg(klprob, atol=1e-12, rtol=1e-12, logging=0);"
      ],
      "id": "0e2bb92c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "which achieves the following results:"
      ],
      "id": "465f65e4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "m, n = size(A)\n",
        "@printf(\"%20s: %11.2e\\n\", \"rms(p-x0)\", norm(p - x0)/√n)\n",
        "@printf(\"%20s: %11.2e\\n\", \"rms(Ap-b)\", norm(A*p - b)/√m)\n",
        "@printf(\"%20s: %11.2e\\n\", \"rms(Ax0-b)\", norm(A*x0 - b)/√m)\n",
        "@printf(\"%20s: %11f\\n\", \"Solve time\", stats.elapsed_time)\n",
        "@printf(\"%20s: %11d\\n\", \"Number of iterations\", stats.iter)\n",
        "plot([p x0], lab=[\"x\" \"x0\"], title=\"true vs recovered distributions\")"
      ],
      "id": "0f7104d4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Synthetic data\n"
      ],
      "id": "13c21e73"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "data = npzread(\"data/synthetic_data.npz\", [\"A\", \"b\", \"x\"])\n",
        "@unpack A, b, x = data\n",
        "x0 = x / sum(x)\n",
        "b = A*x0\n",
        "klprob = KLLSData(A, b, name=\"Synthetic Data\")"
      ],
      "id": "318853a9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "klprob.λ = 0.0\n",
        "p, y, stats = newtoncg(klprob, logging=3);"
      ],
      "id": "05038e98",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "norm(p - x0)/√length(x0)\n",
        "plot([p x0])"
      ],
      "id": "cc8127c6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "data = npzread(\"data/Tobias_data.npz\", [\"A\", \"b\", \"rho\"])\n",
        "@unpack A, b, rho = data\n",
        "rho = convert(Vector{Float64}, rho)\n",
        "rho = rho / sum(rho) \n",
        "b = A*rho\n",
        "klprob = KLLSData(A, b, name=\"Tobias Data\")"
      ],
      "id": "bc2aaefc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "p, y, stats = newtoncg(klprob, logging=1);\n",
        "plot([p x0])"
      ],
      "id": "4abd52a5",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "julia-1.10",
      "language": "julia",
      "display_name": "Julia 1.10.2",
      "path": "/Users/mpf/Library/Jupyter/kernels/julia-1.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}