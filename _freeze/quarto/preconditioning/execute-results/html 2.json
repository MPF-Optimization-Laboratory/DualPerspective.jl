{
  "hash": "7bbd18111a52826a6d7a2dc2b8e970f1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Preconditioning\n---\n\n\\newcommand{\\diag}{\\operatorname{diag}}\n\\newcommand{\\Diag}{\\operatorname{Diag}}\n\\newcommand{\\ip}[1]{\\langle #1 \\rangle}\n****\nEach iteration of the preconditioned Newton CG method approximately solves the trust-region subproblem\n$$\n\\min_{s} \\{\\tfrac{1}{2} \\ip{s, H_k s} + \\ip{\\nabla f_k,s } \\mid \\|s\\|_M \\leq \\Delta\\}\n$$\nwhere $\\nabla f_k$ and $H_k$ are the current gradient and Hessian, and $M\\approx H$ is a positive definite preconditioner. For the KL regularized LS problem,\n$$\nH_k = A S_k A^T + \\lambda I, \\quad S_k:= X_k - x_k x_k^T\n$$\nwhere $x_k$ is the current primal iterate and $X_k=\\Diag(x_k)$.\n\nWe consider these preconditioners:\n\n1. Diagonal, constant: $M = \\Diag(AA^T) + \\lambda I$\n1. Diagonal, variable: $M = \\Diag(AS_kA^T) + \\lambda I$\n1. Cholesky, constant: $M = AA^T + \\lambda I$\n\nThe first two preconditioners have complexity $O(mn)$ to compute and $O(m)$ to apply. The third has cubic complexity, but that cost can be amortized over the Newton iterations.\n\n::: {#16604d44 .cell execution_count=1}\n``` {.julia .cell-code code-fold=\"true\"}\nusing LinearAlgebra, NPZ, StatsPlots\nimport KLLS: KLLSData, DiagAAPreconditioner, solve!\n```\n:::\n\n\n::: {#2d3d4047 .cell execution_count=2}\n``` {.julia .cell-code}\ndata = npzread(\"../data/synthetic-UEG_testproblem.npz\")\nkldata = KLLSData(data[\"A\"], data[\"b_avg\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nKLLS data\nsize: m = 201, n = 500\nnorm(b)  =  3.81e+00\nsum(b)   =  3.74e+01\nλ        =  1.49e-08\n```\n:::\n:::\n\n\nBuild the preconditioner object:\n\n::: {#ba895d39 .cell execution_count=3}\n``` {.julia .cell-code}\nM = DiagAAPreconditioner(kldata)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nDiagAAPreconditioner{Float64, KLLSData{Float64, Matrix{Float64}, Vector{Float64}}, Vector{Float64}}(KLLS data\nsize: m = 201, n = 500\nnorm(b)  =  3.81e+00\nsum(b)   =  3.74e+01\nλ        =  1.49e-08\n, [516.7000917058081, 368.8759467515772, 276.20505019875765, 216.06162314859978, 175.60385417825827, 147.39729141197017, 127.04526681494063, 111.88178828758078, 100.25276917038663, 91.10175690174563  …  91.10025338898511, 100.25050400807804, 111.8788756490268, 127.04077689490195, 147.391175635284, 175.60631476417603, 216.0644939768084, 276.20803388108, 368.87807085172255, 516.7000917058081])\n```\n:::\n:::\n\n\nSolve the problem with and without preconditioning:\n\n::: {#6ea9e3d3 .cell execution_count=4}\n``` {.julia .cell-code}\np, y, stats = solve!(kldata, trace=true)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3398411352896e-160, 0.029232107759780232], [-856659.7177090206, -450742.9928153136, -200597.1475663464, -52600.19523701688, 28438.932790422532, 69760.90751594624, 81476.96665378923, 80790.87879463192, 72347.12786407163, 57723.484174145306  …  56454.14440975289, 56106.131982075014, 71630.7868104822, 113828.66135211568, 106818.14026921435, 105057.35362121272, -41574.65349195089, -219345.14221785794, -389346.62378297234, -831791.2380135708], \"Execution stats: user-requested stop\", <span class=\"ansi-bold\">15234×7 DataFrame</span>\n<span class=\"ansi-bold\">   Row </span>│<span class=\"ansi-bold\"> iter  </span><span class=\"ansi-bold\"> dual_obj         </span><span class=\"ansi-bold\"> r           </span><span class=\"ansi-bold\"> Δ             </span><span class=\"ansi-bold\"> Δₐ_Δₚ       </span><span class=\"ansi-bold\"> cgi</span> ⋯\n       │<span class=\"ansi-bright-black-fg\"> Int64 </span><span class=\"ansi-bright-black-fg\"> Float64          </span><span class=\"ansi-bright-black-fg\"> Float64     </span><span class=\"ansi-bright-black-fg\"> Float64       </span><span class=\"ansi-bright-black-fg\"> Float64     </span><span class=\"ansi-bright-black-fg\"> Int</span> ⋯\n───────┼────────────────────────────────────────────────────────────────────────\n     1 │     0       8.29198e-16  0.963983         1.0        0.0              ⋯\n     2 │     1      -0.322211     0.285094         1.0        0.947355\n     3 │     2      -0.347155     3.81902          1.0        0.1604\n     4 │     3      -0.457222     1.08787          1.0        1.1928\n     5 │     4      -0.635779     0.229284         1.5        1.04508          ⋯\n     6 │     5      -0.76133      0.144397         2.25       1.0822\n     7 │     6      -0.895656     0.0680168        3.375      1.0334\n     8 │     7      -1.05612      0.198751         5.0625     0.994895\n     9 │     8      -1.31249      0.296879         7.59375    1.02037          ⋯\n    10 │     9      -1.60181      0.257841        11.3906     1.0495\n    11 │    10      -1.83894      1.27524         11.3906     0.90113\n   ⋮   │   ⋮           ⋮               ⋮             ⋮             ⋮         ⋮ ⋱\n 15225 │ 15224  -14785.2          0.550979     11551.0        1.00199\n 15226 │ 15225  -14828.5          0.437751     17326.5        1.00041          ⋯\n 15227 │ 15226  -14889.6          1.59568      25989.7        0.998511\n 15228 │ 15227  -14973.2          0.187351     38984.5        1.0006\n 15229 │ 15228  -15079.6          0.288588     58476.8        1.00005\n 15230 │ 15229  -15196.6          0.103978     87715.2        0.999989         ⋯\n 15231 │ 15230  -15276.6          0.0011821        1.31573e5  1.00002\n 15232 │ 15231  -15278.8          0.000492409      1.31573e5  0.999994\n 15233 │ 15232  -15278.8          1.79985e-7       1.31573e5  0.998882\n 15234 │ 15233  -15278.8          3.49827e-10      1.31573e5  0.000146711      ⋯\n<span class=\"ansi-cyan-fg\">                                                2 columns and 15213 rows omitted</span>)</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "preconditioning_files"
    ],
    "filters": [],
    "includes": {}
  }
}